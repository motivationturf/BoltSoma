Excellent progress! Since Supabase is now integrated, you’re ready to move forward with full implementation of **LAM (Lesson & Assessment Model)** on **Replit**.

Here’s your **fully context-engineered Replit prompt** to implement **LAM** across the **backend** and **interface logic**, with **Supabase as the datastore**, and support for both **lesson generation** and **auto-generated quizzes** per topic/grade.

---

## 📌 CONTEXT-ENGINEERED PROMPT FOR REPLIT — FULL LAM IMPLEMENTATION

### Project: **SomaSmart EduHub – LAM (Lesson & Assessment Model)**

**Goal:** Automate the generation of lesson content and assessment questions (MCQs, Fill-in-the-blanks, etc.) for selected grades and subjects using AI, integrated with Supabase.

---

### 🧠 Overview

> LAM (Lesson & Assessment Model) is an AI-powered backend module that:

1. Uses the **Zambian curriculum modules** and topics stored in Supabase.
2. Automatically generates structured **lessons** and **quiz questions** for selected topics and grades.
3. Allows **pupils**, **teachers**, and later **parents** to retrieve or interact with this content.
4. Uses LLM (like DeepSeek or Google Gemma) for prompt generation.

---

### ✅ What the Replit Implementation Must Include

#### 1️⃣ Supabase Tables

Create the following Supabase tables (if not already):

* `curriculum`:

  * `id`, `grade`, `subject`, `topic`, `objective`, `syllabus_link`

* `generated_lessons`:

  * `id`, `topic_id`, `lesson_text`, `created_by`, `created_at`

* `generated_questions`:

  * `id`, `topic_id`, `question_type`, `question_text`, `options`, `correct_answer`, `explanation`, `created_by`, `created_at`

---

#### 2️⃣ Fetch Topics Based on Grade & Subject

When a user (pupil or teacher) selects:

* Grade ➡ Subject ➡ Topic

→ LAM will:

* Check if a lesson and questions already exist in Supabase.
* If not, trigger a function that sends the topic details to an LLM and stores results.

---

#### 3️⃣ LAM AI Prompt Template

```js
// Example LLM prompt for lesson content
`You are an educational assistant for Zambian schools.
Generate an interactive, clear, age-appropriate LESSON PLAN on the topic: "${topic}".
The lesson is for Grade ${grade}, subject: ${subject}.
Structure the content using short paragraphs, examples, and key points.
Output must be in plain text format.`

// Example LLM prompt for questions
`Create 5 multiple choice questions on "${topic}" for Grade ${grade}, subject: ${subject}.
Each question must have 4 options, indicate the correct answer, and provide a 1-line explanation.`
```

Send these prompts via the selected AI model (e.g. DeepSeek or Gemma via OpenRouter API).

---

#### 4️⃣ Function Structure

```ts
// Supabase client already initialized

// Check & generate lesson
async function generateLessonIfAbsent(grade, subject, topic, userId) {
  const { data: existing, error } = await supabase
    .from('generated_lessons')
    .select('*')
    .eq('topic_id', topic);

  if (!existing || existing.length === 0) {
    const prompt = `...`; // See above
    const aiResponse = await fetchAI(prompt);
    const lesson = aiResponse.content;

    await supabase.from('generated_lessons').insert([
      { topic_id: topic, lesson_text: lesson, created_by: userId }
    ]);
  }
}

// Check & generate questions
async function generateQuestionsIfAbsent(grade, subject, topic, userId) {
  const { data: existing } = await supabase
    .from('generated_questions')
    .select('*')
    .eq('topic_id', topic);

  if (!existing || existing.length === 0) {
    const prompt = `...`; // See above
    const aiResponse = await fetchAI(prompt);
    const questions = parseQuestions(aiResponse.content); // parse to JSON

    await supabase.from('generated_questions').insert(
      questions.map(q => ({
        ...q,
        topic_id: topic,
        created_by: userId
      }))
    );
  }
}
```

---

#### 5️⃣ Frontend (UI)

* Show **lesson preview** with “Regenerate” button (if user is a teacher).
* Show **questions preview** with retry option.
* Use React modals or card views.
* Add "Powered by Chisomo AI" badge for branding.

---

#### 6️⃣ Rules/Permissions

* Pupils can view but **not regenerate**.
* Teachers can generate or regenerate content.
* Regeneration overwrites previous records (store `regenerated_at` timestamp).

---

### 🔧 LLM Integration (Replit Safe API Call)

You may use:

* OpenRouter.ai with DeepSeek or Google Gemma model (free-tier).

Example call:

```ts
const fetchAI = async (prompt) => {
  const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${import.meta.env.VITE_OPENROUTER_API_KEY}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      model: "google/gemma-7b-it",
      messages: [{ role: "user", content: prompt }],
    }),
  });

  const result = await response.json();
  return result.choices[0].message;
};
```

---

### ✅ Summary Checklist

| Task                                                                               | Status |
| ---------------------------------------------------------------------------------- | ------ |
| Supabase tables created (`curriculum`, `generated_lessons`, `generated_questions`) | ⬜      |
| Grade → Subject → Topic → Fetch logic implemented                                  | ⬜      |
| AI prompts crafted for lessons & questions                                         | ⬜      |
| AI fetch logic using OpenRouter API (DeepSeek/Gemma)                               | ⬜      |
| Lessons and questions stored into Supabase                                         | ⬜      |
| Frontend modals/cards for display                                                  | ⬜      |
| Role-based permissions (Teacher vs Pupil)                                          | ⬜      |
| UI placeholder for lesson + quiz preview                                           | ⬜      |

---

Would you like me to generate the actual function code, UI components, or database schemas for this now?
